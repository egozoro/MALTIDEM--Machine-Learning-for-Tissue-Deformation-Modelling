%% Train and test an SVM model fo

%Load data (if not already loaded)
load_data = 1;

if load_data
    
    load('/Users/MicTonutti/Dropbox/MRes/Individual Project/Modelling_New/Mesh_Variables.mat');
    cmbrain = centerOfMass(main_brain.img);
    
    load('/Volumes/Macintosh HD/Users/MicTonutti/Documents/Imperial/MRes/Individual Project 2/Nodewise Simulations/Node101/Variables1.mat','DATA_coord','nodes_list');
    
    force_nodes = [82;91;101;107;129;140;148;163;174;185;203];
    force_node_compare = 82;
    force_nodes = force_nodes(force_nodes(:,1)~=force_node_compare,1);
    fn = 20;
    nn_input = NaN;
    nn_output = NaN;
    node_choice = 10;
    a=1;
    err = [];
    distance = NaN;
    vectemp = NaN;
    th = NaN;
    
    for i = 1:size(force_nodes,1)
        force_node = force_nodes(i);
        dir_name = strcat('/Volumes/Macintosh HD/Users/MicTonutti/Documents/Imperial/MRes/Individual Project 2/Nodewise Simulations/Node',num2str(force_node));
        var_filename = strcat(dir_name,'/All_Nodes_Iterations_Fn',num2str(force_node),'.mat');
        load(var_filename);
        for z = 1:30
            for n = node_choice
                for f = 1:fn
                    %if iterations{z}.cos_plot(n,f)>0
                    nn_input(a,1) = iterations{z}.cos_plot(n,f);
                    for g =1:3
                        nn_input(a,g+1) = iterations{z}.force_direction(f,g);
                    end
                    nn_input(a,5) = iterations{z}.dist_plot(n,f);
                    
                    for h=1:3
                        th(h) = iterations{z}.force_direction(fn,h)/norm(iterations{z}.force_direction(fn,:));
                        th(h) = acos(th(h));
                        nn_input(a,5+h) = th(h);
                    end
                    
                    for xyz = 1:3
                        vectemp(1,xyz) = DATA_coord(force_node,xyz+1,1);
                        vectemp(2,xyz) = cmbrain(xyz);
                    end
                    nn_input(a,9) = pdist(vectemp);
                    
                    r = vrrotvec(DATA_coord(force_node,2:4,1)-DATA_coord(nodes_list(n),2:4,1),iterations{z}.force_direction(fn,:));
                    nn_input(a,10) = r(1);
                    nn_input(a,11) = r(2);
                    nn_input(a,12) = r(3);
                    
                    nn_output(a,1) = iterations{z}.displ_tot_plot(n,f);
                    
                    
                    a=a+1;
                    %end
                end
            end
        end
        a
    end
    
    
    vectemp = NaN;
    th = NaN;
    nn_input_compare = NaN;
    nn_output_compare = NaN;
    a=1;
    z=1;
    dir_name = strcat('/Volumes/Macintosh HD/Users/MicTonutti/Documents/Imperial/MRes/Individual Project 2/Nodewise Simulations/Node',num2str(force_node_compare));
    
    var_filename = strcat(dir_name,'/All_Nodes_Iterations_Fn',num2str(force_node_compare),'.mat');
    load(var_filename);
    for z = 1:30
        for n = node_choice
            for f = 1:fn
                nn_input_compare(a,1) = iterations{z}.cos_plot(n,f);
                for g =1:3
                    nn_input_compare(a,g+1) = iterations{z}.force_direction(f,g);
                end
                nn_input_compare(a,5) = iterations{z}.dist_plot(n,f);
                
                for h=1:3
                    th(h) = iterations{z}.force_direction(fn,h)/norm(iterations{z}.force_direction(fn,:));
                    th(h) = acos(th(h));
                    nn_input_compare(a,5+h) = th(h);
                end
                
                for xyz = 1:3
                    vectemp(1,xyz) = DATA_coord(force_node_compare,xyz+1,1);
                    vectemp(2,xyz) = cmbrain(xyz);
                end
                nn_input_compare(a,9) = pdist(vectemp);
                
                r = vrrotvec(DATA_coord(force_node_compare,2:4,1)-DATA_coord(nodes_list(n),2:4,1),iterations{z}.force_direction(fn,:));
                nn_input_compare(a,10) = r(1);
                nn_input_compare(a,11) = r(2);
                nn_input_compare(a,12) = r(3);

                nn_output_compare(a,1) = iterations{z}.displ_tot_plot(n,f);
                
                a=a+1;
                %end
            end
        end
    end
end

% Run SVM
mdl = fitrsvm(nn_input,nn_output,'KernelFunction','gaussian','KernelScale','auto','Standardize',true);
svm_fit = predict(mdl,nn_input_compare);

svm_err_list = nn_output_compare-svm_fit;
svm_std = std(abs(svm_err_list));
svm_err = mean(abs(svm_err_list))
performance = immse(nn_output_compare,svm_fit)

%Plot results
figure
hist(svm_err_list,20);
set(gca,'FontSize',16)
xlabel('Errors (mm)')
ylabel('Percentage')
x=get(gca,'YTickLabel');
x=[0;20;40;60;80;100;120;140];
x=x./sum(size(dist)); 
set(gca,'YTickLabel',num2str(x,2));